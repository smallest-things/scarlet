image: maven:latest

stages:
  - build
  - release

variables:
  MAVEN_CLI_OPTS: "--batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

cache:
  paths:
    - .m2/repository/

build:scarlet:jar:
  stage: build
  rules:
    - if: $CI_MERGE_REQUEST_IID
  artifacts:
    paths:
      - target/*-fat.jar
    expire_in: 1 hour
  script:
    - mvn clean package

# TODO: 
#   - tag
#   - automate the release

build:scarlet:beta:version:
  stage: build
  variables:
    file_name: scarlet-0.0.0-SNAPSHOT-fat.jar
    version: "0.0.0"
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  artifacts:
    paths:
      - target/${file_name}
    expire_in: 1 hour
    reports:
      dotenv: version.env
  script: |
    # build the application
    mvn clean package
    echo "RELEASE_PATH=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/scarlet/${version}/${file_name}" > version.env
    echo "VERSION=${version}" >> version.env
    # then publish it to the generic registry
    curl --header "JOB-TOKEN:$CI_JOB_TOKEN" \
         --upload-file target/${file_name} \
         "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/scarlet/${version}/${file_name}"

release:scarlet:beta:version:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  variables: 
    asset_link: |
      {"name":"Scarlet v${VERSION}", "url":"${RELEASE_PATH}"}
  script: |
    echo "ðŸš€ $RELEASE_PATH"
    echo "ðŸ“¦ $VERSION"
    release-cli create \
      --name "Scarlet v${VERSION}" \
      --tag-name v${VERSION} \
      --description "Beta release v${VERSION}" \
      --assets-link "${asset_link}"








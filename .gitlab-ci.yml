image: maven:latest

stages:
  - build
  - release

variables:
  MAVEN_CLI_OPTS: "--batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

cache:
  paths:
    - .m2/repository/

build:scarlet:jar:
  stage: build
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == "master"
  artifacts:
    paths:
      - target/*-fat.jar
    expire_in: 1 hour
  script:
    - mvn clean package


# === Release process ===
# - change the version in the pom.xml file: <version>0.0.2-SNAPSHOT</version>
# - commit
# - create a tag: x.y.z (ex: 0.0.2)
# - it will trigger the build and the creation of the release

build:scarlet:distribution:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
  artifacts:
    paths:
      - target/*-fat.jar
    expire_in: 1 hour
    reports:
      dotenv: release.env
  script: |
    # build the application
    mvn clean package
    # store variable(s)
    RELEASE_PATH=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/scarlet/${CI_COMMIT_TAG}/scarlet-${CI_COMMIT_TAG}-SNAPSHOT-fat.jar
    echo "RELEASE_PATH=$RELEASE_PATH" > release.env

    # then publish it to the generic registry
    curl --header "JOB-TOKEN:$CI_JOB_TOKEN" \
         --upload-file target/scarlet-${CI_COMMIT_TAG}-SNAPSHOT-fat.jar \
         "$RELEASE_PATH"

create:scarlet:release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  variables: 
    asset_link: |
      {
        "name":"Scarlet version ${CI_COMMIT_TAG}", 
        "url":"${RELEASE_PATH}"
      }
  rules:
    - if: $CI_COMMIT_TAG
  script: |
    echo "ðŸš€ $RELEASE_PATH"
    echo "ðŸ“¦ $CI_COMMIT_TAG"
    release-cli create \
      --name "Scarlet version ${CI_COMMIT_TAG}" \
      --description "Release version ${CI_COMMIT_TAG}" \
      --assets-link "${asset_link}"




